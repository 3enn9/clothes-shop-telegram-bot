import asyncio
import logging
import uuid

from aiogram import types, F, Router, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ReplyKeyboardMarkup, KeyboardButton
from aiohttp import ClientSession

from fastapi.responses import JSONResponse

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from yookassa import Payment, Configuration
from yookassa.domain.notification import WebhookNotificationEventType
from yookassa.domain.response import PaymentResponse

from database.engine import session_maker
from database.models import User, Cart, Product, Orders
from database.orm_query import orm_add_user, orm_add_to_cart, orm_delete_from_cart, orm_reduce_product_in_cart, \
    orm_clear_cart
from keyboards import inlinekeyboard_menu
from data.config import API_KEY

router = Router(name=__name__)


class Discount(StatesGroup):
    promo_code = State()


@router.callback_query(F.data == '–û –Ω–∞—Å')
async def about_us(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(text='–ú—ã –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–≤–æ—é –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å üåü –∏ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è '
                                     '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ü§ù. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üôè',
                                inline_message_id=callback_query.inline_message_id,
                                reply_markup=inlinekeyboard_menu.inkb_back_main_menu)


@router.callback_query(F.data.startswith('–ü–æ–≥–æ–¥–∞'))
async def about_us(callback_query: types.CallbackQuery, bot: Bot):
    if callback_query.data.split('_')[1] == '—Å—Ç—Ä–∞–Ω—ã':
        await callback_query.message.delete()
        await callback_query.message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
            inline_message_id=callback_query.inline_message_id,
            reply_markup=inlinekeyboard_menu.inkb_citys)
    else:
        await callback_query.message.edit_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
            inline_message_id=callback_query.inline_message_id,
            reply_markup=inlinekeyboard_menu.inkb_citys
        )


@router.callback_query(F.data.startswith('weather_'))
async def city_weather(callback_query: types.CallbackQuery):
    coordinates = {
        "–ú–æ—Å–∫–≤–∞": {"lat": 55.7558, "lon": 37.6176,
                   'photo_id': 'AgACAgIAAxkBAAIGwmbQhDFJfGtqQ7aE_QbBOzvdymITAAKw4jEbTcqJSt4qMV1GpFg7AQADAgADeAADNQQ'},
        "–ü–∞—Ä–∏–∂": {"lat": 48.8566, "lon": 2.3522,
                  'photo_id': 'AgACAgIAAxkBAAIGw2bQhDVDwZmcTUOzPqZT3e3cQSU5AAKx4jEbTcqJSihLxXbRDolzAQADAgADeQADNQQ'},
        "–û–ê–≠": {"lat": 25.276987, "lon": 55.296249,
                'photo_id': 'AgACAgIAAxkBAAIGxmbQhDtjpehIDOJfB363M7hW33F_AAKy4jEbTcqJSjyc0IqKI64QAQADAgADeAADNQQ'}
    }

    city = callback_query.data.split('_')[1]

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É
    lat = coordinates[city]["lat"]
    lon = coordinates[city]["lon"]
    # photo_id = coordinates[city]["photo_id"]
    photo_id = 'AgACAgIAAxkBAAIGxmbQhDtjpehIDOJfB363M7hW33F_AAKy4jEbTcqJSjyc0IqKI64QAQADAgADeAADNQQ'

    # –ü–æ—Å—Ç—Ä–æ–π—Ç–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_KEY}&units=metric"
    logging.info(f"–ó–∞–ø—Ä–æ—Å URL: {url}")

    # async with ClientSession() as session:
    #     try:
    #         async with session.get(url) as response:
    #             if response.status == 200:
    #
    #                 # data = await response.json()
    #                 # weather_description = data['weather'][0]['description']
    #                 # temperature = data['main']['temp']
    #                 await callback_query.message.edit_text(
    #                     text=f"–ü–æ–≥–æ–¥–∞: {city}:\n"
    #                          f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
    #                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description.capitalize()}",
    #                     reply_markup=InlineKeyboardMarkup(
    #                         inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ü–æ–≥–æ–¥–∞')]])
    #                 )
    #             else:
    #                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {response.status}")
    #                 await callback_query.message.edit_text(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.",
    #                                                        reply_markup=InlineKeyboardMarkup(
    #                                                            inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
    #                                                                                                   callback_data='–ü–æ–≥–æ–¥–∞')]])
    #                                                        )
    #     except Exception as e:
    #         logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    #         await callback_query.message.edit_text(text="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    #                                                reply_markup=InlineKeyboardMarkup(
    #                                                    inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
    #                                                                                           callback_data='–ü–æ–≥–æ–¥–∞')]])
    #                                                )
    weather_description = 'skfjsjf'
    temperature = '20'
    await callback_query.message.delete()
    await callback_query.message.answer_photo(
        photo=photo_id,
        caption=f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {weather_description.capitalize()}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ü–æ–≥–æ–¥–∞_—Å—Ç—Ä–∞–Ω—ã')]])
    )


@router.callback_query(F.data == '–ú–∞–≥–∞–∑–∏–Ω')
async def main_menu(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        text='[–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!](https://i.ibb.co/dWJdGLB/photo-2024-07-27-08-31-17.jpg)',
        inline_message_id=callback_query.inline_message_id,
        reply_markup=inlinekeyboard_menu.inkb_main_menu,
        parse_mode='Markdown',
    )


@router.callback_query(F.data == '–¢–æ–≤–∞—Ä—ã')
async def choose_category(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(text='[–ö–∞—Ç–µ–≥–æ—Ä–∏–∏](https://i.ibb.co/dWJdGLB/photo-2024-07-27-08-31-17.jpg)',
                                inline_message_id=callback_query.inline_message_id,
                                reply_markup=inlinekeyboard_menu.inkb_items,
                                parse_mode='Markdown',
                                )


@router.callback_query(F.data == '–ö–æ—Ä–∑–∏–Ω–∞')
async def basket(callback_query: types.CallbackQuery, bot: Bot, session: AsyncSession):
    query_cart = select(Cart).where(Cart.user_id == callback_query.from_user.id)
    result_cart = await session.execute(query_cart)
    cart_items = result_cart.scalars().all()

    query_bonuses = select(User.bonuses).where(User.user_id == callback_query.from_user.id)
    result_bonuses = await session.execute(query_bonuses)
    user_bonuses = result_bonuses.scalar_one_or_none() or 0

    if not cart_items:
        await bot.edit_message_text(
            text=f'–£ –≤–∞—Å {user_bonuses} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π\n\n–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
            inline_message_id=callback_query.inline_message_id,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='–ú–∞–≥–∞–∑–∏–Ω')]]),
            parse_mode='Markdown'
        )
        return
    product_ids = [item.product_id for item in cart_items]

    query_products = select(Product).where(Product.id.in_(product_ids))
    result_products = await session.execute(query_products)
    products = {product.id: product for product in result_products.scalars().all()}
    cost = 0

    cart_text = "–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n"
    for index, item in enumerate(cart_items):
        product = products.get(item.product_id)
        if product:
            total_price = item.quantity * product.price
            cost += total_price
            cart_text += f"{index + 1}. {product.name}, –†–∞–∑–º–µ—Ä: {item.size} {item.quantity}—à—Ç. - {total_price} —Ä—É–±.\n"
    finnaly_cost = max(10, cost - user_bonuses)
    cart_text += f'\n–£ –≤–∞—Å {user_bonuses} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 10 —Ä—É–±.\n\n–ò—Ç–æ–≥–æ –ø–æ —Å—á–µ—Ç—É: {cost} —Ä—É–± - {cost - finnaly_cost} –±–æ–Ω—É—Å–æ–≤ = {finnaly_cost} —Ä—É–±.'

    await bot.edit_message_text(
        text=f'[–ö–æ—Ä–∑–∏–Ω–∞]\n\n{cart_text}',
        inline_message_id=callback_query.inline_message_id,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', callback_data=f"–û–ø–ª–∞—Ç–∞")],
                [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞', callback_data="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
                [InlineKeyboardButton(text='\U0001F519–í –º–µ–Ω—é', callback_data='–ú–∞–≥–∞–∑–∏–Ω')]
            ]
        ),
        parse_mode='Markdown'
    )


@router.callback_query(StateFilter(None), F.data == '–ü—Ä–æ–º–æ–∫–æ–¥')
async def main_menu(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    await bot.edit_message_text(
        text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥',
        inline_message_id=callback_query.inline_message_id,
        parse_mode='Markdown',
    )
    await state.set_state(Discount.promo_code)


@router.message(Discount.promo_code, F.text)
async def add_name(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(promo_code=message.text)
    await state.clear()
    await message.answer(
        f'–ü—Ä–æ–º–æ–∫–æ–¥ {message.text} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n–ù–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏!',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text='\U0001F519–ù–∞–∑–∞–¥', switch_inline_query_current_chat='')]]))


@router.callback_query(F.data.startswith('buy_'))
async def add_in_basket(callback_query: types.CallbackQuery, session: AsyncSession):
    user = callback_query.from_user
    product_id = int(callback_query.data.split('_')[1])
    size = callback_query.data.split('_')[2]
    await orm_add_to_cart(session, user_id=user.id, product_id=product_id, size=size)
    await callback_query.answer(text=f'–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                show_alert=True)


@router.callback_query(F.data == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def remove_from_basket(callback_query: types.CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback_query.from_user.id
    query_cart = select(Cart).where(Cart.user_id == user_id)
    result_cart = await session.execute(query_cart)
    cart_items = result_cart.scalars().all()

    product_ids = [item.product_id for item in cart_items]
    query_products = select(Product).where(Product.id.in_(product_ids))
    result_products = await session.execute(query_products)
    products = {product.id: product for product in result_products.scalars().all()}

    buttons = [
        [InlineKeyboardButton(text=f"{products[item.product_id].name} {item.size} {item.quantity} —à—Ç.",
                              callback_data=f"edit_{item.product_id}_{item.size}")]
        for item in cart_items
    ]

    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="–ö–æ—Ä–∑–∏–Ω–∞")])

    await bot.edit_message_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        inline_message_id=callback_query.inline_message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith('edit_'))
async def edit_product(callback_query: types.CallbackQuery, session: AsyncSession, bot: Bot):
    user = callback_query.from_user
    size = callback_query.data.split('_')[2]
    product_id = int(callback_query.data.split('_')[1])
    select_product = select(Product).where(Product.id == product_id)
    result_product = await session.execute(select_product)
    product = result_product.scalar_one_or_none()

    await bot.edit_message_text(
        text=f'[–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å]({product.url_image})',
        inline_message_id=callback_query.inline_message_id,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï", callback_data=f'add_{product_id}_{size}')],
            [InlineKeyboardButton(text="‚ûñ", callback_data=f'remove_{product_id}_{size}')],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É')]

        ]),
        parse_mode='Markdown'
    )


@router.callback_query(F.data.startswith('remove_'))
async def remove_product(callback_query: types.CallbackQuery, session: AsyncSession, bot: Bot):
    user = callback_query.from_user
    size = callback_query.data.split('_')[2]
    product_id = int(callback_query.data.split('_')[1])

    await orm_reduce_product_in_cart(session, user_id=user.id, product_id=product_id, size=size)
    await callback_query.answer(text=f'–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                                show_alert=True)


@router.callback_query(F.data.startswith('add_'))
async def add_product(callback_query: types.CallbackQuery, session: AsyncSession, bot: Bot):
    user = callback_query.from_user
    size = callback_query.data.split('_')[2]
    product_id = int(callback_query.data.split('_')[1])

    await orm_add_to_cart(session, user_id=user.id, product_id=product_id, size=size)
    await callback_query.answer(text=f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É',
                                show_alert=True)


@router.callback_query(F.data == "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É")
async def cancel_payment(callback_query: types.CallbackQuery, session: AsyncSession, bot: Bot):
    user_id = callback_query.from_user.id

    # –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    query_user = select(User).where(User.user_id == user_id)
    result_user = await session.execute(query_user)
    user = result_user.scalar_one_or_none()

    if user:
        user.has_active_invoice = False
        await session.commit()

    await callback_query.answer(text="–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)

    if user and user.invoice_message_id:
        try:
            await bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=user.invoice_message_id
            )
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–≤–æ–π—Å–æ–º: {e}")





### –ü—Ä–æ–±–∞
class AddPayment(StatesGroup):
    phone = State()
    address = State()


@router.callback_query(StateFilter(None), F.data == '–û–ø–ª–∞—Ç–∞')
async def get_phone_number(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_user = select(User).where(User.user_id == callback.from_user.id)
    result_user = await session.execute(query_user)
    user = result_user.scalar_one_or_none()

    if user and user.has_active_invoice:
        await callback.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)]
        ]
    )
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç',
                           reply_markup=contact_keyboard)
    await state.set_state(AddPayment.phone)


@router.message(AddPayment.phone, F.contact)
async def get_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(phone=str(message.contact.phone_number))
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddPayment.address)


@router.message(AddPayment.phone, F.text)
async def get_phone_number(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(phone=message.text)
    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å', reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddPayment.address)


@router.message(AddPayment.address, F.text)
async def address(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession):
    user_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞
    await state.update_data(address=message.text)

    data = await state.get_data()
    phone = data.get('phone')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_user = select(User).where(User.user_id == user_id)
    result_user = await session.execute(query_user)
    user = result_user.scalar_one_or_none()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    query_cart = select(Cart).where(Cart.user_id == user_id)
    result_cart = await session.execute(query_cart)
    cart_items = result_cart.scalars().all()

    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    product_ids = [item.product_id for item in cart_items]
    query_products = select(Product).where(Product.id.in_(product_ids))
    result_products = await session.execute(query_products)
    products = {product.id: product for product in result_products.scalars().all()}

    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    cost = 0
    description_parts = []

    for item in cart_items:
        product = products.get(item.product_id)
        if product:
            total_price = item.quantity * product.price
            cost += total_price
            description_parts.append(f"{product.name} {item.size} {item.quantity} —à—Ç.")
    description_parts.append(f'–ê–¥—Ä–µ—Å: {message.text}')
    description_parts.append(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}')

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query_bonuses = select(User.bonuses).where(User.user_id == user_id)
    result_bonuses = await session.execute(query_bonuses)
    user_bonuses = result_bonuses.scalar_one_or_none() or 0

    # –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤
    finnaly_cost = max(10, cost - user_bonuses)

    # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    description = '\n'.join(description_parts)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
    payment_id = str(uuid.uuid4())
    payment = Payment.create({
        "amount": {
            "value": finnaly_cost,
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://your-site.com/return-url"  # URL, –∫—É–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        },
        "capture": True,
        "description": description,
        "metadata": {
            "user_id": user_id,
            "payment_id": payment_id  # –≤–∞—à ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—á–µ—Ç–∞
        }
    })

    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É
    confirmation_url = payment.confirmation.confirmation_url

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    inkb_delete_invoice = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=confirmation_url)],
            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É')]
        ]
    )

    message_invoice = await bot.send_message(
        chat_id=user_id,
        text=f"–í–∞—à –∑–∞–∫–∞–∑:\n{description}\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {finnaly_cost} RUB",
        reply_markup=inkb_delete_invoice
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.invoice_message_id = message_invoice.message_id
    user.has_active_invoice = True
    user.payment_id = payment_id
    await session.commit()

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–≤–æ–π—Å–æ–º
    await asyncio.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
    updated_user = await session.get(User, user.id)
    if updated_user.has_active_invoice:
        try:
            await bot.delete_message(chat_id=user_id, message_id=message_invoice.message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º: {e}")
        finally:
            updated_user.has_active_invoice = False
            await session.commit()

from data.config import app, bot

async def get_session() -> AsyncSession:
    async with session_maker() as session:
        yield session
@app.post("/api/payment/notifications")
async def payment_notifications(data: dict):
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
    async with session_maker() as session:
        if data.get('event') == 'payment.succeeded':
            payment_id = data['object']['id']
            user_id = int(data['object']['metadata']['user_id'])
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
            await orm_clear_cart(session, user_id)

            # –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            query_user = select(User).where(User.user_id == user_id)
            result_user = await session.execute(query_user)
            user = result_user.scalar_one_or_none()

            if user:
                user.has_active_invoice = False
                await session.commit()

            await bot.send_message(chat_id=user_id, text="–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä ")

    return JSONResponse(content={"status": "ok"}, status_code=200)